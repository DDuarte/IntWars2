signed int __usercall bigPacketHandler<eax>(double a1<st0>, __int16 cmd, __int64 a3)
{
  int v3; // ecx@1
  int v4; // ebx@1
  unsigned int ebp0; // ebp@0
  int v6; // esi@1
  int v7; // eax@1
  int v8; // eax@2
  int _ESI; // esi@11
  void (__stdcall *v11)(_DWORD); // eax@11
  void (*v13)(void); // eax@12
  double v14; // st7@12
  int _EDX; // edx@14
  const CHAR *v17; // eax@18
  int v18; // eax@18
  int v19; // edx@19
  int *v20; // esi@19
  const CHAR *v21; // edx@19
  int v22; // eax@19
  int v23; // eax@19
  int v24; // ecx@19
  int v25; // eax@19
  int v26; // eax@19
  int v27; // ecx@21
  int v28; // eax@21
  int v29; // eax@23
  int v30; // eax@24
  int v31; // edi@32
  int v32; // edx@32
  int *_EAX; // eax@35
  int _EDX; // edx@35
  int v37; // eax@35
  double v38; // st7@35
  double v39; // st7@35
  int v41; // edx@35
  double v42; // st7@35
  double v43; // st7@35
  double v45; // st7@37
  int v46; // esi@39
  int v47; // eax@39
  const CHAR *v48; // eax@40
  int _EBX; // ebx@44
  const char *v50; // eax@45
  signed int v51; // eax@54
  char v52; // al@59
  int v53; // eax@59
  char v54; // al@60
  int v55; // eax@60
  int v56; // eax@62
  int v57; // eax@62
  int v58; // eax@63
  int v59; // edi@64
  int v60; // edi@68
  signed int v61; // eax@70
  int v62; // esi@70
  char v63; // zf@70
  int v64; // eax@82
  int v65; // ecx@84
  int v66; // eax@86
  int v67; // eax@89
  int v68; // eax@89
  int v69; // ebx@94
  int v70; // esi@94
  int v71; // eax@94
  void *_EAX; // eax@97
  double v75; // st7@99
  int v76; // eax@99
  HWND v77; // eax@109
  int v78; // eax@110
  HANDLE v79; // eax@116
  float v80; // eax@117
  bool v81; // eax@121
  int v82; // eax@126
  FILE *v83; // eax@132
  FILE *v84; // esi@132
  void (__stdcall *v85)(_DWORD, _DWORD, _DWORD, _DWORD); // edx@132
  unsigned __int8 v86; // bl@136
  int v87; // eax@136
  int v88; // eax@137
  int _EBX; // ebx@137
  int v90; // edi@137
  int v91; // esi@137
  unsigned __int8 _CF; // cf@137
  unsigned __int8 _ZF; // zf@137
  const char *v97; // eax@141
  int v98; // eax@147
  int v99; // edx@147
  int v100; // eax@147
  int v101; // eax@150
  int v102; // eax@151
  int v103; // esi@152
  int _EAX; // eax@157
  int v105; // ecx@157
  char v106; // zf@162
  int v108; // eax@166
  int v109; // edx@166
  int v110; // eax@166
  int v111; // eax@167
  int v112; // eax@169
  int v113; // edx@169
  char *v114; // ecx@169
  int _EDI; // edi@169
  int v116; // esi@169
  int v117; // eax@170
  const CHAR *v118; // ecx@172
  char *v119; // eax@173
  int v120; // esi@173
  char v122; // al@176
  int v123; // ebx@177
  const CHAR *v124; // eax@179
  int v125; // eax@182
  int v126; // eax@182
  int v127; // ecx@182
  int v128; // ebx@183
  int v129; // eax@184
  int v130; // ebx@186
  void *v131; // eax@189
  void *v132; // eax@192
  int v133; // ecx@193
  void *v134; // eax@206
  const CHAR *v135; // edi@206
  int v136; // esi@206
  float v137; // esi@207
  int v138; // esi@209
  int v139; // esi@215
  int (*v140)(void); // eax@215
  int v141; // eax@218
  int v142; // eax@219
  int v143; // eax@220
  int *v144; // eax@223
  int v145; // eax@232
  int v146; // edi@240
  int v147; // esi@261
  int v148; // eax@269
  int v149; // eax@270
  double v150; // st7@271
  int v151; // edx@271
  double v152; // st7@272
  int v153; // edx@272
  int v154; // eax@273
  int v155; // eax@274
  int v156; // eax@276
  int v157; // eax@282
  int v158; // eax@284
  int v159; // eax@286
  int *v160; // edx@291
  char *v161; // eax@291
  char *v162; // ecx@293
  char v163; // al@294
  signed int v165; // ebx@298
  int v166; // edi@298
  int v167; // ecx@298
  float v168; // ecx@300
  int v169; // eax@300
  int v170; // edi@302
  int v171; // ebx@302
  int v172; // eax@303
  int v173; // edx@304
  int v174; // eax@306
  int v175; // eax@317
  int v176; // eax@317
  char *v177; // ecx@320
  int v178; // eax@320
  int v179; // eax@321
  int v180; // eax@323
  int v181; // eax@324
  void *v182; // eax@325
  int v183; // ecx@327
  int v184; // eax@327
  int v185; // esi@331
  int v186; // eax@331
  bool v187; // edx@334
  int _ESI; // esi@335
  double v190; // st7@338
  void (__stdcall *v191)(_DWORD, _DWORD, _DWORD); // eax@338
  int v192; // eax@339
  int v193; // eax@341
  void *v194; // eax@342
  char v195; // al@346
  int _EDI; // edi@352
  char v198; // bl@352
  int v199; // ecx@352
  int v200; // ecx@367
  unsigned int v201; // ecx@393
  int v202; // eax@398
  float v203; // ecx@401
  float v204; // edx@402
  int v205; // eax@402
  char v206; // zf@402
  float v207; // edx@402
  int v208; // eax@407
  int v209; // eax@408
  int v210; // ecx@408
  int v211; // edx@408
  int v212; // esi@410
  int v213; // eax@411
  float v214; // ecx@414
  int v215; // eax@415
  int v216; // edi@428
  int v217; // eax@431
  int v218; // ecx@433
  int v219; // eax@436
  int v220; // ecx@436
  int v221; // edx@445
  int v222; // eax@449
  int v223; // esi@449
  int v224; // eax@451
  int v225; // eax@451
  unsigned __int8 v226; // bl@451
  int v227; // edi@451
  int v228; // esi@451
  int v229; // ecx@451
  int v230; // edx@451
  int v231; // ecx@451
  int v232; // eax@454
  char v233; // cf@458
  int v234; // ebx@462
  int v235; // edx@463
  int v236; // eax@467
  int v237; // eax@470
  int v238; // eax@470
  int v239; // edx@473
  int v240; // eax@474
  int _EAX; // eax@477
  int v242; // ebx@477
  int v245; // esi@478
  int v246; // ecx@484
  int v247; // edi@484
  int v248; // ecx@496
  char v249; // al@496
  char *v250; // eax@497
  int v251; // eax@499
  int v252; // esi@499
  int v253; // esi@500
  double v254; // st7@501
  const CHAR *v255; // edx@501
  int v256; // ecx@501
  int v257; // eax@504
  int v258; // esi@504
  float v259; // [sp+18h] [bp-71Ch]@362
  int v260; // [sp+1Ch] [bp-718h]@362
  float v261; // [sp+20h] [bp-714h]@271
  int v262; // [sp+24h] [bp-710h]@101
  int v263; // [sp+28h] [bp-70Ch]@40
  LPCSTR v264[5]; // [sp+2Ch] [bp-708h]@2
  __int64 v265; // [sp+40h] [bp-6F4h]@33
  int v266; // [sp+48h] [bp-6ECh]@34
  int v267; // [sp+4Ch] [bp-6E8h]@11
  float v268; // [sp+60h] [bp-6D4h]@33
  int v269; // [sp+64h] [bp-6D0h]@187
  char ArgList[4]; // [sp+7Ch] [bp-6B8h]@21
  __int64 v271; // [sp+90h] [bp-6A4h]@19
  int v272; // [sp+98h] [bp-69Ch]@19
  int v273; // [sp+9Ch] [bp-698h]@408
  int v274; // [sp+ACh] [bp-688h]@17
  int *v275; // [sp+B0h] [bp-684h]@19
  unsigned int v276; // [sp+C4h] [bp-670h]@19
  char v277; // [sp+C8h] [bp-66Ch]@341
  char v278; // [sp+E4h] [bp-650h]@341
  char v279; // [sp+100h] [bp-634h]@177
  char v280; // [sp+11Ch] [bp-618h]@498
  char v281; // [sp+138h] [bp-5FCh]@185
  char v282; // [sp+154h] [bp-5E0h]@506
  char v283; // [sp+170h] [bp-5C4h]@185
  char v284; // [sp+18Ch] [bp-5A8h]@177
  char v285; // [sp+1A8h] [bp-58Ch]@320
  char v286; // [sp+1C4h] [bp-570h]@489
  char v287; // [sp+1E0h] [bp-554h]@490
  char v288; // [sp+1FCh] [bp-538h]@219
  char v289; // [sp+218h] [bp-51Ch]@494
  char v290; // [sp+234h] [bp-500h]@39
  char v291; // [sp+250h] [bp-4E4h]@18
  char v292; // [sp+26Ch] [bp-4C8h]@278
  char v293; // [sp+288h] [bp-4ACh]@324
  char v294; // [sp+2A4h] [bp-490h]@321
  char v295; // [sp+2C0h] [bp-474h]@323
  char v296; // [sp+2DCh] [bp-458h]@495
  float DstBuf; // [sp+2F8h] [bp-43Ch]@18
  float v298; // [sp+2FCh] [bp-438h]@33
  __int64 v299; // [sp+2FDh] [bp-437h]@33
  int v300; // [sp+305h] [bp-42Fh]@39
  char v301; // [sp+309h] [bp-42Bh]@39
  char v302; // [sp+314h] [bp-420h]@1
  int (__thiscall **v303)(void *, char); // [sp+334h] [bp-400h]@1
  int Dst; // [sp+3E9h] [bp-34Bh]@11
  float v305; // [sp+3EDh] [bp-347h]@11
  int v306; // [sp+3F1h] [bp-343h]@11
  float v308; // [sp+3F9h] [bp-33Bh]@11
  char v309; // [sp+3FDh] [bp-337h]@11
  const char *v310; // [sp+410h] [bp-324h]@45
  unsigned int v311; // [sp+424h] [bp-310h]@45
  char v312; // [sp+46Ch] [bp-2C8h]@262
  int v313; // [sp+47Ch] [bp-2B8h]@262
  int v314; // [sp+730h] [bp-4h]@1

  sub_48A630(&v303);
  v303 = &off_A3218C;
  v4 = 0;
  v314 = 0;
  sub_50D350(bigPacketHandler, 0x1F4u);
  v6 = (int)(v303 + 14);
  v7 = ((int (__thiscall *)(int (__thiscall ***)(void *, char)))v303[7])(&v303);
  (*(void (__thiscall **)(int (__thiscall ***)(void *, char), char *, int))v6)(&v303, &v302, v7);
  switch ( cmd )
  {
    case 0x4B:
      v264[1] = (LPCSTR)*(_BYTE *)(a3 + 5);
      sub_424A60(v264[1]);
      v8 = sub_424A30(v264[0]);
      sub_8D08D0(v8, v264[1]);
      goto LABEL_3;
    default:
      goto LABEL_3;
    case 0xCD:
      sub_8991C0(a3);
      sub_407FE0();
      sub_408010();
      while ( (unsigned __int8)sub_423DA0() )
      {
        sub_43BF40();
        sub_48A010();
        sub_408410();
      }
      goto LABEL_3;
    case 0x86:
      sub_82E5C0();
      goto LABEL_8;
    case 0x16:
      goto LABEL_8;
    case 0xCA:
      if ( !dword_D9B168 )
      {
LABEL_3:
        v314 = -1;
        sub_48A4D0(&v303);
        return 0;
      }
      _ESI = a3;
      v11 = *(void (__stdcall **)(_DWORD))(*(_DWORD *)dword_D9B168 + 12);
      *(float *)&v267 = *(float *)(a3 + 5) + flt_D9B22C;
      v11(v267);
      BYTE3(Dst) = 8;
      LODWORD(v305) = 0;
      __asm { movss   xmm0, dword ptr [esi+5] }
      v306 = (*(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 84))();
      __asm { movss   [esp+700h+var_33F], xmm0 }
      (*(void (**)(void))(*(_DWORD *)dword_D9B168 + 16))();
      v308 = a1;
      memcpy(&v309, &v302, 0x20u);
      (*(void (__thiscall **)(int, signed int, char *, signed int, _DWORD))(*(_DWORD *)dword_2E47DF8 + 48))(
        dword_2E47DF8,
        49,
        (char *)&Dst + 3,
        2,
        0);
      goto LABEL_8;
    case 0x7A:
      v13 = *(void (**)(void))(*(_DWORD *)dword_D9B168 + 16);
      v14 = *(float *)(a3 + 9) * 0.1000000014901161 + flt_D9B22C * 0.800000011920929;
      flt_D9B22C = v14;
      v13();
      *(float *)&v267 = v14;
      *(float *)&v267 = (*(float *)&v267 - *(float *)(a3 + 5)) * 0.5;
      flt_D9B228 = flt_D9B22C - *(float *)&v267;
      goto LABEL_13;
    case 0x43:
LABEL_13:
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xCB:
      _EDX = a3;
      __asm
      {
        movss   xmm0, dword ptr [edx+5]
        movss   flt_1DFB398, xmm0
      }
      goto LABEL_8;
    case 0x8E:
      dword_D9B284 = *(_BYTE *)(a3 + 5);
      goto LABEL_8;
    case 0x50:
      if ( dword_2E48324 )
      {
        sub_755B50(11, (int)"Creating Hero...\n", SLOBYTE(v264[2]));
        v267 = a3 + 23;
        std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
          &v274,
          a3 + 23);
        LOBYTE(v314) = 1;
        if ( *(_BYTE *)(a3 + 16) )
        {
          std__basic_string_char_std__char_traits_char__std__allocator_char____operator_(&v274, "game_bot_");
          std__basic_string_char_std__char_traits_char__std__allocator_char____operator__(&v274, a3 + 151);
          std__basic_string_wchar_t_std__char_traits_wchar_t__std__allocator_wchar_t____basic_string_wchar_t_std__char_traits_wchar_t__std__allocator_wchar_t__(&DstBuf);
          LOBYTE(v314) = 2;
          v17 = (const CHAR *)sub_760760(v264[2], v264[3]);
          sub_82A070(v17);
          v18 = sub_829D10(&v291, &DstBuf);
          LOBYTE(v314) = 3;
          std__basic_string_char_std__char_traits_char__std__allocator_char____operator_(&v274, v18);
          LOBYTE(v314) = 2;
          std_char(&v291);
          LOBYTE(v314) = 1;
          std__basic_string_wchar_t_std__char_traits_wchar_t__std__allocator_wchar_t_____basic_string_wchar_t_std__char_traits_wchar_t__std__allocator_wchar_t__(&DstBuf);
        }
        v21 = (const CHAR *)*(_BYTE *)(a3 + 18);
        v264[1] = (LPCSTR)(*(_BYTE *)(a3 + 15) != 0 ? 100 : 200);
        v264[0] = v21;
        v22 = sub_40DC10();
        v23 = sub_8D5080(v22, SLOBYTE(v264[0]), v264[1]);
        v24 = *(_DWORD *)v23;
        v19 = *(_DWORD *)(v23 + 4);
        v25 = *(_DWORD *)(v23 + 8);
        LODWORD(v271) = v24;
        v264[1] = (LPCSTR)*(_BYTE *)(a3 + 18);
        HIDWORD(v271) = v19;
        v272 = v25;
        v26 = sub_40DC10();
        sub_8D4E20(v26, SLOBYTE(v264[1]));
        v20 = v275;
        if ( v276 < 0x10 )
          v20 = (int *)&v275;
        v27 = *(_BYTE *)(a3 + 13);
        LOBYTE(v19) = *(_BYTE *)(a3 + 16) != 0;
        *(_DWORD *)ArgList = a3 + 151;
        v28 = sub_8A4070(
                v20,
                a3 + 151,
                *(_BYTE *)(a3 + 15) != 0 ? 100 : 200,
                *(_DWORD *)(a3 + 9),
                *(_DWORD *)(a3 + 5),
                v27,
                v19);
        sub_89AB30(v28 + 10820);
        sub_41B2F0();
        if ( (*(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 84))() == *(_DWORD *)(a3 + 9) )
        {
          if ( (*(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 84))() != -1 )
          {
            v29 = sub_896920();
            if ( (unsigned __int8)(*(int (__thiscall **)(int))(*(_DWORD *)v29 + 4))(v29) )
            {
              v30 = sub_896920();
              (*(void (__thiscall **)(int, signed int))(*(_DWORD *)v30 + 12))(v30, 1);
            }
          }
        }
        if ( *(_DWORD *)(a3 + 9) == (*(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 84))() )
        {
          if ( (*(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 84))() != -1 )
          {
            sub_432A90();
            sub_78D2C0();
            sub_432A90();
            sub_78E920();
          }
        }
        sub_755B50(11, (int)"Hero %s created for %s\n", ArgList[0]);
        LOBYTE(v314) = 0;
        std_char(&v274);
        v264[1] = (LPCSTR)&v303;
      }
      else
      {
        sub_755B50(
          9,
          (int)"Received createhero message while possibly reconnecting (nav grid didn't exist) may cause missing hero\n",
          SLOBYTE(v264[2]));
LABEL_30:
        v264[1] = (LPCSTR)&v303;
      }
      goto LABEL_9;
    case 0x96:
    case 0xEC:
      goto LABEL_30;
    case 0x67:
      if ( !dword_2E48324 )
      {
        sub_755B50(
          9,
          (int)"Received create neutral message while possibly reconnecting (nav grid didn't exist) may cause missing hero\n",
          SLOBYTE(v264[2]));
        goto LABEL_43;
      }
      v32 = *(_DWORD *)(a3 + 318);
      v264[1] = 0;
      v31 = a3 + 46;
      *(_DWORD *)ArgList = sub_8A15A0(
                             (char *)(a3 + 110),
                             *(_DWORD *)(a3 + 306),
                             a3 + 46,
                             0,
                             *(_DWORD *)(a3 + 302),
                             a3 + 174,
                             *(_DWORD *)(a3 + 306),
                             *(_DWORD *)(a3 + 310),
                             *(_DWORD *)(a3 + 314),
                             v32,
                             0);
      if ( *(_DWORD *)ArgList )
      {
        *(float *)&v267 = *(float *)(a3 + 34) - *(float *)(a3 + 10);
        v268 = *(float *)(a3 + 38) - *(float *)(a3 + 14);
        *(float *)&v265 = *(float *)(a3 + 42) - *(float *)(a3 + 18);
        DstBuf = *(float *)&v267;
        v298 = v268;
        *(float *)((char *)&v299 + 3) = *(float *)&v265;
        sub_404540();
        __asm { xorps   xmm0, xmm0 }
        if ( (unsigned __int8)sub_4046A0(a3 + 10, a3 + 34) )
        {
          __asm
          {
            movss   dword ptr [esp+700h+var_6F4], xmm0
            movss   dword ptr [esp+700h+var_6F4+4], xmm0
            movss   xmm0, ds:dword_9FB1B4
            movss   [esp+700h+var_6EC], xmm0
          }
          v271 = v265;
          v272 = v266;
        }
        sub_89AB30(*(_DWORD *)ArgList + 10820);
        sub_41B2F0();
        v37 = *(_DWORD *)ArgList;
        v38 = (double)*(signed int *)(*(_DWORD *)ArgList + 1324);
        *(_DWORD *)(*(_DWORD *)ArgList + 12708) = *(_DWORD *)(a3 + 22);
        v39 = v38 + *(float *)(v37 + 1608);
        __asm { xorps   xmm0, xmm0 }
        *(_DWORD *)(v37 + 12712) = *(_DWORD *)(a3 + 26);
        v41 = *(_DWORD *)(a3 + 30);
        *(float *)(v37 + 1608) = v39;
        *(_DWORD *)(v37 + 12716) = v41;
        _EDX = v37 + 292;
        *(float *)&v265 = *(float *)(v37 + 308);
        v42 = (double)*(signed int *)(v37 + 1328);
        __asm { movss   dword ptr [edx+20h], xmm0 }
        _EAX = &v267;
        *(float *)&v265 = v42 + *(float *)&v265;
        v43 = *(float *)&v265;
        __asm { movss   dword ptr [esp+700h+var_6F4], xmm0 }
        *(float *)&v267 = v43 + 0.0;
        if ( *(float *)&v267 < 0.0 )
          _EAX = (int *)&v265;
        __asm { movss   xmm0, dword ptr [eax] }
        *(float *)&v265 = *(float *)_EDX;
        __asm { movss   [esp+700h+var_6D4], xmm0 }
        v45 = v268;
        __asm { movss   dword ptr [edx+10h], xmm0 }
        if ( *(float *)&v265 >= v45 )
          __asm { movss   dword ptr [edx], xmm0 }
        v46 = *(_DWORD *)ArgList;
        *(float *)&v265 = *(float *)(*(_DWORD *)ArgList + 308);
        sub_8C1810(*(float *)&v265, 1);
        sub_80E640(*(_DWORD *)(a3 + 5), *(_BYTE *)(a3 + 9));
        v47 = std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
                &v290,
                a3 + 238);
        LOBYTE(v314) = 4;
        sub_8B01C0(*(_DWORD *)(a3 + 318), *(_DWORD *)(a3 + 5), v47, a3 + 10, a3 + 174);
        LOBYTE(v314) = 0;
        std_char(&v290);
        v300 = v272;
        LOBYTE(DstBuf) = 84;
        *(_QWORD *)((char *)&v298 + 1) = v271;
        v301 = 0;
        sub_43FCA0(v46 + 348);
        v264[1] = (LPCSTR)&v303;
      }
      else
      {
        v48 = *(const CHAR **)(a3 + 5);
        v264[1] = (LPCSTR)*(_BYTE *)(a3 + 9);
        v264[0] = v48;
        v263 = a3 + 110;
        sub_755B50(11, (int)"PKT_S2C_CreateNeutral failed, Name:%s, Skin:%s, ObjID:%d, NodeID:%d\n", v31);
        if ( !(unsigned __int8)sub_76DEA0(
                                 0,
                                 "false",
                                 "General hard assert occurred, game may crash!",
                                 "C:\\jenkins\\workspace\\New-Code-CI-LIVE\\code\\HeroWars_clientServer\\SourcesClient\\Game.cpp",
                                 1055,
                                 "Game_ProcessWorldEvent2") )
          goto LABEL_43;
        __asm { int     3               ; Trap to Debugger }
        v264[1] = (LPCSTR)&v303;
      }
      goto LABEL_9;
    case 0xA6:
      _EBX = 0;
      *(_DWORD *)ArgList = 0;
      sub_4198F0();
      sub_419920();
      if ( !(unsigned __int8)sub_423DA0() )
        goto LABEL_55;
      while ( 1 )
      {
        *(_DWORD *)ArgList = *(_DWORD *)sub_43BF40();
        sub_48A440((char *)&Dst + 3);
        LOBYTE(v314) = 5;
        v50 = v310;
        if ( v311 < 0x10 )
          v50 = (const char *)&v310;
        if ( !strcmp(v50, (const char *)(a3 + 10)) )
          break;
        LOBYTE(v314) = 0;
        sub_419750((char *)&Dst + 3);
        sub_408410();
        if ( !(unsigned __int8)sub_423DA0() )
          goto LABEL_51;
      }
      _EBX = sub_417920(SBYTE3(Dst));
      LOBYTE(v314) = 0;
      sub_419750((char *)&Dst + 3);
LABEL_51:
      if ( !*(_DWORD *)ArgList )
        goto LABEL_55;
      if ( !(unsigned __int8)sub_423DA0() )
      {
        if ( (unsigned __int8)sub_423DA0() )
          v51 = 1;
        else
LABEL_55:
          v51 = 0;
        if ( (unsigned __int8)sub_76DEA0(
                                v51,
                                "turretBuilding && iter != iterEnd",
                                "General hard assert occurred, game may crash!",
                                "C:\\jenkins\\workspace\\New-Code-CI-LIVE\\code\\HeroWars_clientServer\\SourcesClient\\Game.cpp",
                                1087,
                                "Game_ProcessWorldEvent2") )
          __asm { int     3               ; Trap to Debugger }
      }
      if ( _EBX )
      {
        sub_80E640(*(_DWORD *)(a3 + 5), *(_BYTE *)(a3 + 9));
        v53 = *(_DWORD *)(a3 + 75);
        *(_BYTE *)(_EBX + 544) = 1;
        *(_DWORD *)(_EBX + 564) = v53;
        v52 = *(_BYTE *)(a3 + 74);
LABEL_60:
        v54 = v52 & 1;
        *(_BYTE *)(_EBX + 544) = v54;
        v55 = -(v54 != 0);
        *(_DWORD *)(_EBX + 564) = (char *)&unk_1800000 + (v55 & 0x800000);
      }
      else
      {
        (*(void (__stdcall **)(_DWORD, _DWORD))(**(_DWORD **)ArgList + 500))(*(_DWORD *)(a3 + 5), *(_BYTE *)(a3 + 9));
      }
      goto LABEL_8;
    case 0x66:
      sub_755B50(11, (int)"PKT_S2C_StartSpawn\n", SLOBYTE(v264[2]));
      v264[1] = (LPCSTR)*(_BYTE *)(a3 + 5);
      dword_D9B260 = 1;
      v56 = sub_40DC10();
      sub_8D4C70(v56, 100, v264[1]);
      v264[1] = (LPCSTR)*(_BYTE *)(a3 + 6);
      v57 = sub_40DC10();
      sub_8D4C70(v57, -56, v264[1]);
      goto LABEL_8;
    case 0x12:
      sub_8FFEA0();
      sub_86F940();
      sub_75AC10((unsigned int)&dword_B02568);
      v58 = sub_896920();
      (**(void (__thiscall ***)(int, int *, int *))v58)(v58, &dword_B02568, &dword_B0257C);
      sub_78AD90();
      sub_755B50(11, (int)"PKT_S2C_EndSpawn\n", SLOBYTE(v264[2]));
      sub_4405A0();
      sub_4405D0();
      while ( (unsigned __int8)sub_423DA0() )
      {
        v59 = *(_DWORD *)sub_43BF40();
        if ( !sub_896420() )
          (*(void (__thiscall **)(int, int, char *))(*(_DWORD *)v59 + 548))(v59, v59, ArgList);
        sub_408410();
      }
      LOBYTE(v271) = 86;
      if ( !(unsigned __int8)(*(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 160))() )
      {
        v60 = sub_517820();
        if ( v60 == 262917615 )
          v60 = 262917614;
        *(int *)((char *)&v272 + 1) = sub_517820();
        v62 = sub_896420();
        v63 = (unsigned __int8)sub_80DCF0() == 0;
        v61 = 262917615;
        if ( v63 )
          v61 = v60;
        *(_DWORD *)((char *)&v271 + 5) = *(int *)((char *)&v272 + 1) ^ v62 ^ v61;
      }
      *(_DWORD *)((char *)&v271 + 1) = 0;
      LOBYTE(v271) = 86;
      (*(void (__stdcall **)(signed int, __int64 *, signed int, _DWORD))(*(_DWORD *)dword_2E47DF8 + 48))(
        13,
        &v271,
        1,
        0);
      LODWORD(v265) = operator new(0x50u);
      LOBYTE(v314) = 6;
      if ( (_DWORD)v265 )
      {
        dword_D9B238 = (void *)sub_8B6510();
        v264[1] = (LPCSTR)&v303;
      }
      else
      {
        dword_D9B238 = 0;
        v264[1] = (LPCSTR)&v303;
      }
      goto LABEL_9;
    case 0x60:
      sub_755B50(11, (int)"PKT_StartGame\n", SLOBYTE(v264[2]));
      if ( !(unsigned __int8)(*(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 160))() )
      {
        if ( !LODWORD(dword_D9B254) )
        {
          if ( (unsigned __int8)sub_76DEA0(
                                  0,
                                  "Player",
                                  "General hard assert occurred, game may crash!",
                                  "C:\\jenkins\\workspace\\New-Code-CI-LIVE\\code\\HeroWars_clientServer\\SourcesClient\\Game.cpp",
                                  1182,
                                  "Game_ProcessWorldEvent2") )
            __asm { int     3               ; Trap to Debugger }
        }
      }
      if ( dword_D9B260 <= 2 )
      {
        if ( dword_2E47DF0 )
        {
          flt_AF6AF8 = sub_74E5C0();
          dword_D9B260 = v64;
          sub_74FAB0("Performance", 0);
          sub_74E6A0();
          byte_D9B36B = 1;
          sub_4076E0(sub_80DF50);
          LOBYTE(v314) = 7;
          sub_48E890(&v267);
          sub_868D00("Music");
          if ( !byte_D9B282 )
            sub_80C070();
          if ( sub_74FAB0("General", 0) )
          {
            if ( *((_DWORD *)dword_D9B37C + 17588) )
            {
              v66 = sub_8C8630(v65, dword_D9B37C);
              v264[1] = (LPCSTR)1;
            }
            else
            {
              v66 = sub_8C8630(v65, dword_D9B37C);
              v264[1] = 0;
            }
            (*(void (__thiscall **)(int, LPCSTR))(*(_DWORD *)v66 + 4))(v66, v264[1]);
          }
          sub_868D00("Music End");
          v67 = sub_43BEE0();
          v68 = (*(int (__thiscall **)(int))(*(_DWORD *)v67 + 4))(v67);
          (*(void (__thiscall **)(int, signed int))(*(_DWORD *)v68 + 44))(v68, 1);
          if ( dword_D9B278 )
            goto LABEL_515;
          if ( (unsigned __int8)sub_76DEA0(
                                  0,
                                  "GUIMenu",
                                  "General hard assert occurred, game may crash!",
                                  "C:\\jenkins\\workspace\\New-Code-CI-LIVE\\code\\HeroWars_clientServer\\SourcesClient\\Game.cpp",
                                  1232,
                                  "Game_ProcessWorldEvent2") )
            __asm { int     3               ; Trap to Debugger }
          if ( dword_D9B278 )
LABEL_515:
            sub_7E1C70();
          v69 = sub_896920();
          v70 = *(_DWORD *)v69 + 12;
          v71 = sub_74FBE0("LockCamera");
          (*(void (__thiscall **)(int, int))v70)(v69, v71);
          sub_74FAB0("Hacks", 0);
          if ( (unsigned __int8)(*(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 160))() )
          {
            if ( *(_DWORD *)(dword_D9B278 + 264) )
              sub_7AE310();
          }
          _EAX = dword_AEE88F8;
          if ( !dword_AEE88F8 )
          {
            sub_48B170();
            _EAX = dword_AEE88F8;
          }
          __asm
          {
            movss   xmm0, ds:dword_9FA9F8
            movss   dword ptr [eax], xmm0
            movss   xmm0, ds:dword_A69930
            movss   dword ptr [eax+8], xmm0
          }
          v75 = sub_74E5C0();
          *(float *)(v76 + 4) = v75;
          sub_75A4D0();
          sub_8681F0();
          sub_730210();
          *(_BYTE *)dword_D9B380 = 1;
          sub_72F890();
          sub_8B5400();
          sub_86D950();
          if ( *(_BYTE *)(a3 + 5) & 1 )
          {
            if ( !(unsigned __int8)(*(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 160))() )
            {
              sub_760760(0, 1);
              sub_86D260(v262, v263, 0, 1);
            }
          }
          sub_755B50(11, (int)"PKT_StartGame Finished proccessing\n", SLOBYTE(v264[2]));
          LOBYTE(v314) = 0;
          if ( v267 )
            (**(void (__stdcall ***)(_DWORD))v267)(1);
        }
        else
        {
          sub_755B50(
            9,
            (int)"Error gPTR_Input does not exist.  May be caused by a reconnect issue.\n",
            SLOBYTE(v264[2]));
        }
      }
      goto LABEL_8;
    case 0xCF:
      sub_755B50(11, (int)"End game message processing!\n", SLOBYTE(v264[2]));
      if ( dword_D9B260 >= 2 )
      {
        v80 = dword_D9B254;
        if ( !LODWORD(dword_D9B254) )
        {
          if ( !(unsigned __int8)(*(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 160))() )
          {
            v81 = LODWORD(dword_D9B254) || (unsigned __int8)(*(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 160))();
            if ( (unsigned __int8)sub_76DEA0(
                                    v81,
                                    "Player || gPTR_Client->IsReplaying()",
                                    "General hard assert occurred, game may crash!",
                                    "C:\\jenkins\\workspace\\New-Code-CI-LIVE\\code\\HeroWars_clientServer\\SourcesClient\\Game.cpp",
                                    1330,
                                    "Game_ProcessWorldEvent2") )
              __asm { int     3               ; Trap to Debugger }
          }
          v80 = dword_D9B254;
          if ( !LODWORD(dword_D9B254) )
            goto LABEL_516;
        }
        if ( ((v82 = *(_DWORD *)(LODWORD(v80) + 28), v82 != 100) || !(*(_BYTE *)(a3 + 5) & 1))
          && (v82 != 200 || *(_BYTE *)(a3 + 5) & 1) )
          dword_D9B264 = 2;
        else
LABEL_516:
          dword_D9B264 = 1;
        v264[1] = 0;
        v264[0] = (LPCSTR)1;
        LOBYTE(v265) = -110;
        *(_DWORD *)((char *)&v265 + 1) = 0;
        v85 = *(void (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD))(*(_DWORD *)dword_2E47DF8 + 48);
        dword_D9B260 = 3;
        v85(5, &v265, 1, 0);
        sub_755B50(11, (int)"End game message processed!\n", SLOBYTE(v264[2]));
        v83 = fopen("lastCmd.log", L"w");
        v84 = v83;
        if ( v83 )
        {
          fprintf(v83, " ");
          fclose(v84);
        }
      }
      else
      {
        ShowWindow(hWnd, 0);
        sub_755B50(11, (int)"End game message processed during load!\n", SLOBYTE(v264[2]));
        if ( hMutex )
        {
          ReleaseMutex(hMutex);
          hMutex = 0;
        }
        if ( LODWORD(dword_D9B254) )
        {
          v78 = *(_DWORD *)(LODWORD(dword_D9B254) + 28);
          if ( (v78 != 100 || !(*(_BYTE *)(a3 + 5) & 1)) && (v78 != 200 || *(_BYTE *)(a3 + 5) & 1) )
            dword_D9B264 = 2;
          else
            dword_D9B264 = 1;
        }
        else
        {
          v263 = sub_760760("Error", 0);
          v77 = GetActiveWindow();
          MessageBoxA(v77, (LPCSTR)v263, v264[0], (UINT)v264[1]);
          dword_D9B264 = 3;
        }
        sub_8168A0();
        v79 = GetCurrentProcess();
        TerminateProcess(v79, 0);
      }
      goto LABEL_8;
    case 0xCE:
      sub_90CB90(*(_BYTE *)(a3 + 5) != 0 ? 100 : 200);
      goto LABEL_8;
    case 0x47:
      if ( dword_D9B278 )
      {
        v86 = *(_BYTE *)(a3 + 25);
        LODWORD(v265) = sub_90A700();
        v87 = sub_90A700();
        sub_7DE1D0(a3 + 5, *(_DWORD *)v87, *(_DWORD *)v265, v86 & 0xF, (v86 >> 4) & 1, (v86 >> 5) & 1, (v86 >> 6) & 1);
      }
      goto LABEL_8;
    case 0x25:
      _EBX = a3;
      v88 = sub_756320();
      __asm { movss   xmm0, dword ptr [ebx+0Dh] }
      v90 = v88;
      v91 = 0;
      __asm { comiss  xmm0, ds:dword_9FAB38 }
      v267 = v88;
      __asm { movss   dword ptr [esp+700h+var_6F4], xmm0 }
      if ( !(_CF | _ZF) )
      {
        if ( LODWORD(dword_D9B254) == v88 )
        {
          if ( *(_DWORD *)(a3 + 9) )
          {
            v91 = sub_756320();
            if ( v91 )
            {
              v97 = (const char *)sub_760760(
                                    COERCE_UNSIGNED_INT64(*(float *)&v265),
                                    COERCE_UNSIGNED_INT64(*(float *)&v265) >> 32);
              sub_912770(v91, v267, 6, v97);
              v90 = v267;
            }
          }
        }
      }
      if ( v90 )
      {
        if ( !v91 )
        {
          *(float *)&v264[1] = *(float *)(a3 + 13);
          sub_89C3F0();
          sub_8C20A0(v264[1]);
        }
      }
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x11:
      if ( sub_756320() )
      {
        v98 = sub_89C3F0();
        v99 = *(_DWORD *)v98;
        *(float *)&v264[1] = *(float *)(a3 + 9);
        v100 = (*(int (__thiscall **)(int))(v99 + 140))(v98);
        sub_768EA0(v100, v264[1]);
      }
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x8D:
      sub_9119A0();
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x3D:
      v101 = sub_756320();
      sub_839760(v101);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xED:
      v102 = sub_756320();
      if ( v102 )
      {
        v103 = _RTDynamicCast(v102, 0, &off_B03814, &off_B0BCBC, 0);
        if ( !v103 )
        {
          if ( (unsigned __int8)sub_76DEA0(
                                  0,
                                  "pEmitter",
                                  "General hard assert occurred, game may crash!",
                                  "C:\\jenkins\\workspace\\New-Code-CI-LIVE\\code\\HeroWars_clientServer\\SourcesClient\\Game.cpp",
                                  1455,
                                  "Game_ProcessWorldEvent2") )
            __asm { int     3               ; Trap to Debugger }
        }
        *(_DWORD *)(v103 + 300) &= ~(1 << *(_BYTE *)(a3 + 9));
      }
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xE5:
      _EAX = a3;
      v105 = *(_DWORD *)(a3 + 10);
      if ( !v105 )
        goto LABEL_162;
      if ( LODWORD(dword_D9B254) )
      {
        if ( v105 != *(_DWORD *)(LODWORD(dword_D9B254) + 28) )
          goto LABEL_165;
      }
      else
      {
        if ( v105 != 100 )
        {
          v264[1] = (LPCSTR)&v303;
          goto LABEL_9;
        }
      }
LABEL_162:
      v106 = *(_BYTE *)(a3 + 5) == 0;
      *(float *)&v264[1] = *(float *)(a3 + 6);
      if ( !v106 )
      {
        __asm { movss   xmm0, dword ptr [eax+12h] }
        LODWORD(v265) = *(_DWORD *)(a3 + 14);
        __asm { movss   dword ptr [esp+704h+var_6F4+4], xmm0 }
        (*(void (__stdcall **)(__int64 *, LPCSTR))(*(_DWORD *)dword_D9B230 + 16))(&v265, v264[1]);
        v264[1] = (LPCSTR)&v303;
        goto LABEL_9;
      }
      (*(void (__stdcall **)(LPCSTR))(*(_DWORD *)dword_D9B230 + 20))(v264[1]);
LABEL_165:
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x2A:
      sub_419200();
      v108 = sub_4191D0();
      v109 = *(_DWORD *)v108;
      v110 = *(_DWORD *)(v108 + 4);
      LODWORD(v265) = v109;
      HIDWORD(v265) = v110;
      while ( (unsigned __int8)sub_423DA0() )
      {
        v111 = sub_43BF40();
        (*(void (__stdcall **)(_DWORD))(**(_DWORD **)v111 + 348))(*(float *)(a3 + 5));
        sub_408410();
      }
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x81:
      _EDI = a3;
      v112 = *(_BYTE *)(a3 + 34);
      v114 = (char *)(a3 + 107);
      v113 = *(_DWORD *)(a3 + 30) & 0x1FF;
      LODWORD(v265) = a3 + 107;
      v116 = a3 + 43;
      if ( v112 & 4 )
      {
        v264[1] = (LPCSTR)(v112 & 0xFFFFFF01);
        v117 = sub_8A17D0(v114, *(_DWORD *)(a3 + 22), a3 + 43, *(_DWORD *)(a3 + 22), v113);
      }
      else
      {
        v264[1] = (LPCSTR)(v112 & 0xFFFFFF01);
        v117 = sub_8A15A0(v114, *(_DWORD *)(a3 + 22), a3 + 43, *(_DWORD *)(a3 + 22), v113, 0, 0, 0, 0, 0, 0);
      }
      v118 = *(const CHAR **)(a3 + 5);
      _EBX = v117;
      v264[1] = (LPCSTR)*(_BYTE *)(a3 + 9);
      v264[0] = v118;
      if ( v117 )
      {
        sub_80E640(v264[0], SLOBYTE(v264[1]));
        v119 = (char *)sub_90A700();
        v120 = sub_407940(*(_DWORD *)v119);
        (*(void (__thiscall **)(int, int))(*(_DWORD *)_EBX + 568))(_EBX, v120);
        (*(void (__thiscall **)(int, int))(*(_DWORD *)_EBX + 572))(_EBX, v120);
        (*(void (__thiscall **)(int, int))(*(_DWORD *)_EBX + 708))(_EBX, (*(_BYTE *)(a3 + 34) >> 1) & 1);
        __asm
        {
          movss   xmm0, dword ptr [edi+27h]
          movss   dword ptr [ebx+2CE4h], xmm0
        }
        *(_DWORD *)(_EBX + 564) = *(_DWORD *)(a3 + 35);
        *(_BYTE *)(_EBX + 544) = 1;
        v52 = *(_BYTE *)(a3 + 34) >> 3;
        goto LABEL_60;
      }
      v263 = v265;
      sub_755B50(11, (int)"PKT_SpawnMinionS2C failed, Name:%s, Skin:%s, ObjID:%d, NodeID:%d\n", v116);
      if ( (unsigned __int8)sub_76DEA0(
                              0,
                              "false",
                              "General hard assert occurred, game may crash!",
                              "C:\\jenkins\\workspace\\New-Code-CI-LIVE\\code\\HeroWars_clientServer\\SourcesClient\\Game.cpp",
                              1537,
                              "Game_ProcessWorldEvent2") )
        __asm { int     3               ; Trap to Debugger }
      goto LABEL_8;
    case 0xDA:
      v122 = *(_BYTE *)(a3 + 52);
      *(_DWORD *)ArgList = a3 + 117;
      if ( v122 )
      {
        if ( v122 == 1 )
        {
          v126 = *(_DWORD *)(a3 + 14);
          v127 = *(_DWORD *)(a3 + 18);
          LODWORD(v271) = *(_DWORD *)(a3 + 10);
          HIDWORD(v271) = v126;
          v272 = v127;
          v125 = sub_8F2CD0((char *)(a3 + 53));
          if ( v125 )
          {
            v128 = v125 + 252;
            if ( (**(int (__thiscall ***)(_DWORD))(v125 + 252))(v125 + 252) )
            {
              v129 = (**(int (__thiscall ***)(_DWORD))v128)(v128);
              *(float *)&v265 = *(float *)(v129 + 40) + *(float *)(v129 + 28);
              v268 = *(float *)(v129 + 44) + *(float *)(v129 + 32);
              *(float *)&v267 = *(float *)(v129 + 48) + *(float *)(v129 + 36);
              LODWORD(v271) = v265;
              *((float *)&v265 + 1) = v268;
              HIDWORD(v271) = LODWORD(v268);
              v266 = v267;
              v272 = v267;
            }
          }
          std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
            &v283,
            *(_DWORD *)ArgList);
          LOBYTE(v314) = 10;
          std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
            &v281,
            a3 + 53);
          LOBYTE(v314) = 11;
          sub_8B0460(&v281, &v283, &v271, a3 + 22, a3 + 34);
          LOBYTE(v314) = 10;
          std_char(&v281);
          LOBYTE(v314) = 0;
          std_char(&v283);
          sub_80E640(*(_DWORD *)(a3 + 5), *(_BYTE *)(a3 + 9));
          sub_8B06D0();
        }
      }
      else
      {
        std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
          &v279,
          a3 + 117);
        LOBYTE(v314) = 8;
        std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
          &v284,
          a3 + 53);
        LOBYTE(v314) = 9;
        v123 = sub_877F70(&v284, &v279, *(_DWORD *)(a3 + 46) & 0x1FF, a3 + 10, a3 + 22, *(_BYTE *)(a3 + 51));
        LOBYTE(v314) = 8;
        std_char(&v284);
        LOBYTE(v314) = 0;
        std_char(&v279);
        if ( v123 )
        {
          sub_80E640(*(_DWORD *)(a3 + 5), *(_BYTE *)(a3 + 9));
          sub_8782D0();
        }
        else
        {
          v124 = *(const CHAR **)(a3 + 5);
          v264[1] = (LPCSTR)*(_BYTE *)(a3 + 9);
          v264[0] = v124;
          v263 = *(_DWORD *)ArgList;
          sub_755B50(
            11,
            (int)"PKT_SpawnLevelPropS2C_s failed, Name:%s, Skin:%s, PropName: %s, ObjID:%d, NodeID:%d\n",
            a3 + 53);
          if ( (unsigned __int8)sub_76DEA0(
                                  0,
                                  "false",
                                  "General hard assert occurred, game may crash!",
                                  "C:\\jenkins\\workspace\\New-Code-CI-LIVE\\code\\HeroWars_clientServer\\SourcesClient\\Game.cpp",
                                  1564,
                                  "Game_ProcessWorldEvent2") )
            __asm { int     3               ; Trap to Debugger }
        }
      }
      goto LABEL_8;
    case 0xDC:
      v130 = sub_90DF70(*(_DWORD *)(a3 + 5));
      if ( v130 )
      {
        LODWORD(v268) = 0;
        v269 = 0;
        LOBYTE(v314) = 12;
        if ( *(_BYTE *)(a3 + 11) )
        {
          if ( *(_BYTE *)(a3 + 11) == 1 )
          {
            v131 = operator new(0x10u);
            LODWORD(v265) = v131;
            LOBYTE(v314) = 13;
            if ( v131 )
            {
              sub_8F32D0(v131);
              LOBYTE(v314) = 12;
              sub_48AFA0();
            }
            else
            {
              LOBYTE(v314) = 12;
              sub_48AFA0();
            }
          }
        }
        else
        {
          v132 = operator new(8u);
          if ( v132 )
          {
            v133 = *(_BYTE *)(a3 + 10);
            *(_DWORD *)v132 = &off_A32170;
            *((_DWORD *)v132 + 1) = v133;
          }
          sub_48AF00();
        }
        LODWORD(v265) = v264;
        sub_4315D0(&v268);
        sub_793440(v130, *(_BYTE *)(a3 + 9), v264[0], v264[1]);
        LOBYTE(v314) = 0;
        sub_4E12E0();
      }
      goto LABEL_8;
    case 0xDB:
      sub_8F2DC0(&v265, *(_DWORD *)(a3 + 77));
      if ( (_DWORD)v265 )
      {
        LODWORD(v265) = sub_403F50(v265);
        if ( (_DWORD)v265 )
        {
          sub_8F2D70();
          LOBYTE(v314) = 14;
          if ( !*(_DWORD *)ArgList )
          {
            sub_755B50(
              9,
              (int)"Receieved an PKT_UpdateLevelPropS2C_s for an Object is not a Level Prop!\n",
              SLOBYTE(v264[2]));
LABEL_212:
            LOBYTE(v314) = 0;
            sub_4E12E0();
            goto LABEL_8;
          }
          if ( !*(_BYTE *)(a3 + 85) )
          {
            std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(&v274);
            LOBYTE(v314) = 15;
            sub_82C2B0(&v267, &v268, &v265);
            *(float *)&v264[1] = *(float *)&v265;
            *(float *)v264 = v268;
            v263 = v267;
            sub_403C30();
            sub_877BF0((int)&v274, v263, *(float *)v264, *(float *)&v264[1]);
            LOBYTE(v314) = 14;
            std_char(&v274);
            LOBYTE(v314) = 0;
            sub_4E12E0();
            goto LABEL_8;
          }
          if ( *(_BYTE *)(a3 + 85) != 1 )
          {
            if ( (unsigned __int8)sub_76DEA0(
                                    0,
                                    "false && \"Recieved an UpdateLevelProp command that we don't recognize!\"",
                                    "General hard assert occurred, game may crash!",
                                    "C:\\jenkins\\workspace\\New-Code-CI-LIVE\\code\\HeroWars_clientServer\\SourcesClient\\Game.cpp",
                                    1675,
                                    "Game_ProcessWorldEvent2") )
            {
              __asm { int     3               ; Trap to Debugger }
              LOBYTE(v314) = 0;
              sub_4E12E0();
              goto LABEL_8;
            }
            goto LABEL_212;
          }
          if ( *(_BYTE *)(a3 + 86) )
          {
            if ( (unsigned __int8)sub_76DEA0(
                                    0,
                                    "false && \"Recieved an UpdateLevelProp command of CMD_SET_PARTICLE_VALUE that we don't recognize!\"",
                                    "General hard assert occurred, game may crash!",
                                    "C:\\jenkins\\workspace\\New-Code-CI-LIVE\\code\\HeroWars_clientServer\\SourcesClient\\Game.cpp",
                                    1666,
                                    "Game_ProcessWorldEvent2") )
            {
              __asm { int     3               ; Trap to Debugger }
              LOBYTE(v314) = 0;
              sub_4E12E0();
              goto LABEL_8;
            }
            goto LABEL_212;
          }
          v135 = (const CHAR *)*(_BYTE *)(a3 + 87);
          v136 = *(_BYTE *)(a3 + 88);
          v134 = operator new(8u);
          if ( v134 )
          {
            *((_DWORD *)v134 + 1) = v136;
            *(_DWORD *)v134 = &off_A32170;
            LODWORD(v137) = v134;
          }
          else
          {
            LODWORD(v137) = 0;
          }
          v268 = v137;
          sub_48B1F0(LODWORD(v137));
          nullsub_1(&v268, LODWORD(v137), LODWORD(v137));
          LOBYTE(v314) = 16;
          v138 = *(_DWORD *)(v265 + 12);
          v264[1] = v135;
          LODWORD(v265) = &v263;
          sub_4315D0(&v268);
          (*(void (__thiscall **)(int, int, LPCSTR, LPCSTR))(*(_DWORD *)v138 + 12))(v138, v263, v264[0], v264[1]);
          LOBYTE(v314) = 14;
          sub_4E12E0();
          LOBYTE(v314) = 0;
          sub_4E12E0();
        }
        else
        {
          sub_755B50(
            9,
            (int)"Receieved an PKT_UpdateLevelPropS2C_s for an Object is not a Level Prop!\n",
            SLOBYTE(v264[2]));
        }
      }
      else
      {
        sub_755B50(
          9,
          (int)"Recieved an PKT_UpdateLevelPropS2C_s for a non-existing level prop on this client!\n",
          SLOBYTE(v264[2]));
      }
LABEL_8:
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x1C:
      v139 = sub_90A670(*(_DWORD *)(a3 + 5));
      v140 = *(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 160);
      v267 = v139;
      if ( !(unsigned __int8)v140() )
      {
        if ( v139 )
        {
          if ( (unsigned __int8)sub_896510() )
          {
            v141 = sub_760760(v264[2], v264[3]);
            std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
              &v274,
              v141);
            LOBYTE(v314) = 17;
            sub_7A40A0(&v274, *(_DWORD *)(a3 + 10));
            if ( (unsigned __int8)sub_748CD0() )
            {
              v142 = sub_829E60(&v288, &v274);
              LOBYTE(v314) = 18;
              if ( *(_DWORD *)(v142 + 24) < 8u )
                v143 = v142 + 4;
              else
                v143 = *(_DWORD *)(v142 + 4);
              sub_912770(v267, LODWORD(dword_D9B254), *(_BYTE *)(a3 + 9), "%ls", v143);
              LOBYTE(v314) = 17;
              std__basic_string_wchar_t_std__char_traits_wchar_t__std__allocator_wchar_t_____basic_string_wchar_t_std__char_traits_wchar_t__std__allocator_wchar_t__(&v288);
            }
            else
            {
              v144 = v275;
              if ( v276 < 0x10 )
                v144 = (int *)&v275;
              sub_912770(v267, LODWORD(dword_D9B254), *(_BYTE *)(a3 + 9), "%s", v144);
            }
            LOBYTE(v314) = 0;
            std_char(&v274);
          }
        }
      }
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x6C:
      sub_883FA0();
      goto LABEL_8;
    case 0x9C:
      sub_883F30();
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xC8:
      sub_883EA0();
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x21:
      sub_883E10();
      goto LABEL_8;
    case 0x74:
      v145 = sub_90DF70(*(_DWORD *)(a3 + 5));
      if ( !v145 )
      {
        sub_755B50(9, (int)"PKT_S2C_SetSpellData: invalid Object\n", SLOBYTE(v264[2]));
        v264[1] = (LPCSTR)&v303;
        goto LABEL_9;
      }
      sub_8277D0(v145, *(_DWORD *)(a3 + 9), *(_BYTE *)(a3 + 13));
      goto LABEL_8;
    case 0xD4:
      if ( dword_D9B278 )
      {
        if ( (unsigned int)*(_BYTE *)(a3 + 5) <= 0xE )
          sub_7D96B0(*(_BYTE *)(a3 + 5));
      }
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xDD:
      if ( dword_D9B278 )
      {
        v146 = *(_BYTE *)(a3 + 5);
        sub_428320();
        if ( sub_81CC10(v146) )
        {
          if ( *(_BYTE *)(a3 + 15) )
          {
            if ( *(_BYTE *)(a3 + 15) == 1 )
              sub_755B50(
                9,
                (int)"Unrecognized command for packet CMD_SET_ATTACKER, no longer valid\n",
                SLOBYTE(v264[2]));
            else
              sub_755B50(9, (int)"Unrecognized command for packet PKT_S2C_HandleCapturePointUpdate\n", SLOBYTE(v264[2]));
          }
          else
          {
            sub_90A670(*(_DWORD *)(a3 + 6));
            sub_81CAF0(*(_BYTE *)(a3 + 10));
          }
        }
        else
        {
          if ( (unsigned __int8)sub_76DEA0(
                                  0,
                                  "capPoint",
                                  "General hard assert occurred, game may crash!",
                                  "C:\\jenkins\\workspace\\New-Code-CI-LIVE\\code\\HeroWars_clientServer\\SourcesClient\\Game.cpp",
                                  1787,
                                  "Game_ProcessWorldEvent2") )
            __asm { int     3               ; Trap to Debugger }
        }
      }
      goto LABEL_8;
    case 0x91:
      if ( dword_D9B278 )
        sub_7DEFF0(
          *(_BYTE *)(a3 + 390),
          *(_DWORD *)(a3 + 392),
          *(_BYTE *)(a3 + 389),
          a3 + 5,
          a3 + 133,
          a3 + 261,
          *(_BYTE *)(a3 + 391) & 1);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xDF:
      if ( dword_D9B278 )
        sub_7DA4D0(a3);
      goto LABEL_8;
    case 0xDE:
      if ( !dword_D9B278 )
        goto LABEL_30;
      sub_7D9F30(*(_DWORD *)(a3 + 9));
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x65:
      sub_48CAA0(HIDWORD(a3));
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x68:
      v264[1] = (LPCSTR)HIDWORD(a3);
      sub_48CCD0(a3, ebp0);
      goto LABEL_8;
    case 0x48:
      if ( dword_2E48324 )
      {
        sub_77C520(HIDWORD(a3), a3, HIDWORD(a3));
      }
      else
      {
        if ( (unsigned __int8)sub_76DEA0(
                                0,
                                L"0",
                                "General hard assert occurred, game may crash!",
                                "C:\\jenkins\\workspace\\New-Code-CI-LIVE\\code\\HeroWars_clientServer\\SourcesClient\\Game.cpp",
                                1868,
                                "Game_ProcessWorldEvent2") )
          __asm { int     3               ; Trap to Debugger }
      }
      goto LABEL_8;
    case 0xD9:
      v147 = *(_DWORD *)(a3 + 23);
      v264[1] = (LPCSTR)*(_BYTE *)(a3 + 22);
      sub_8A3000(
        *(_DWORD *)(a3 + 27),
        a3 + 31,
        a3 + 31,
        a3 + 95,
        a3 + 95,
        v147 & 0x1FF,
        *(_DWORD *)(a3 + 5),
        *(_BYTE *)(a3 + 9));
      goto LABEL_8;
    case 0x41:
      sub_83ED80();
      LOBYTE(v314) = 19;
      sub_83F6B0((unsigned int)&v312, a3 + 98);
      if ( !v313 )
      {
        LOBYTE(v314) = 0;
        sub_40E1E0(&v312);
        v264[1] = (LPCSTR)&v303;
        goto LABEL_9;
      }
      if ( !(unsigned __int8)sub_4046A0(a3 + 5, a3 + 5) )
      {
        if ( (unsigned __int8)sub_76DEA0(
                                0,
                                "n.position == n.position",
                                "General hard assert occurred, game may crash!",
                                "C:\\jenkins\\workspace\\New-Code-CI-LIVE\\code\\HeroWars_clientServer\\SourcesClient\\Game.cpp",
                                2141,
                                "Game_ProcessWorldEvent2") )
          __asm { int     3               ; Trap to Debugger }
      }
      sub_8808C0(1, 0, a3 + 5, a3);
      LOBYTE(v314) = 0;
      sub_40E1E0(&v312);
      goto LABEL_8;
    case 0x38:
      sub_912330(*(_DWORD *)(a3 + 5));
      goto LABEL_8;
    case 0x26:
      v148 = sub_756320();
      if ( v148 )
      {
        v149 = sub_4054D0(*(_DWORD *)(v148 + 8));
        if ( v149 )
        {
          v150 = *(float *)(a3 + 21);
          v151 = *(_DWORD *)(a3 + 29);
          v264[1] = *(LPCSTR *)(a3 + 25);
          v262 = v151;
          v263 = *(_DWORD *)(a3 + 33);
          v264[0] = *(LPCSTR *)(a3 + 37);
          v261 = v150;
          sub_912360(*(float *)(a3 + 13), v149, LODWORD(v261), v151, v263, v264[0], v264[1]);
        }
      }
      goto LABEL_8;
    case 0x7C:
      v152 = *(float *)(a3 + 29);
      v153 = *(_DWORD *)(a3 + 37);
      v264[1] = *(LPCSTR *)(a3 + 33);
      v262 = v153;
      v263 = *(_DWORD *)(a3 + 41);
      v264[0] = *(LPCSTR *)(a3 + 45);
      v261 = v152;
      sub_9123D0(*(float *)(a3 + 13), a3 + 17, LODWORD(v261), v153, v263, v264[0], v264[1]);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xE1:
      v154 = sub_756320();
      if ( v154 )
      {
        v155 = sub_4054D0(*(_DWORD *)(v154 + 8));
        if ( v155 )
          (*(void (__thiscall **)(int, _DWORD))(*(_DWORD *)v155 + 152))(v155, *(_DWORD *)(a3 + 9));
      }
      goto LABEL_8;
    case 0xE2:
      v156 = sub_756320();
      if ( v156 )
      {
        if ( sub_4054D0(*(_DWORD *)(v156 + 8)) )
        {
          std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
            &v292,
            a3 + 9);
          LOBYTE(v314) = 20;
          sub_8AC5F0();
          LOBYTE(v314) = 0;
          std_char(&v292);
        }
      }
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x70:
      if ( dword_D9B260 != 2 )
      {
        sub_755B50(9, (int)"Client got a chain missile packet while loading into the game!\n", SLOBYTE(v264[2]));
        v264[1] = (LPCSTR)&v303;
        goto LABEL_9;
      }
      if ( sub_42C6E0(*(_DWORD *)(a3 + 1)) )
      {
        v157 = sub_42C6E0(*(_DWORD *)(a3 + 1));
        if ( (unsigned __int8)sub_76DEA0(
                                v157 == 0,
                                "Missiles::Manager.find(n.FromID) == 0",
                                "General hard assert occurred, game may crash!",
                                "C:\\jenkins\\workspace\\New-Code-CI-LIVE\\code\\HeroWars_clientServer\\SourcesClient\\Game.cpp",
                                2211,
                                "Game_ProcessWorldEvent2") )
          __asm { int     3               ; Trap to Debugger }
      }
      v158 = sub_407940(*(_DWORD *)(a3 + 9));
      if ( !v158 )
        goto LABEL_43;
      sub_896B00(v158 + 4508);
      sub_40F3A0();
      LOBYTE(v314) = 21;
      sub_483330();
      if ( (_DWORD)v265 )
      {
        v159 = sub_40EF70();
        (*(void (__thiscall **)(int, _DWORD))(*(_DWORD *)v159 + 72))(v159, a3);
      }
      LOBYTE(v314) = 0;
      sub_4E12E0();
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x58:
      sub_755B50(11, (int)"Receiving PKT_SynchVersionS2C_s, Server :%s\n", a3 + 126);
      sub_90B330(a3 + 2366, a3 + 3390, *(_WORD *)(a3 + 4414), *(_BYTE *)(a3 + 4416) & 1);
      sub_90B460("game_start_game_mapmode", a3 + 2174);
      sub_90B390("game_start_game_maplevel", *(_DWORD *)(a3 + 6));
      byte_B806CF = *(_BYTE *)(a3 + 5);
      byte_D80ED9 = 1;
      sub_755C00();
      strncpy(byte_2E48360, (const char *)(a3 + 2174), 0x80u);
      if ( !byte_2E483E0 || !_stricmp(&byte_2E483E0, "Automatic") )
      {
        std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
          &v274,
          "Map");
        LOBYTE(v314) = 22;
        v161 = itoa(*(_DWORD *)(a3 + 6), (char *)&DstBuf, 10);
        std__basic_string_char_std__char_traits_char__std__allocator_char____operator__(&v274, v161);
        v160 = v275;
        if ( v276 < 0x10 )
          v160 = (int *)&v275;
        v162 = &byte_2E483E0;
        do
        {
          v163 = *(_BYTE *)v160;
          *v162 = *(_BYTE *)v160;
          v160 = (int *)((char *)v160 + 1);
          ++v162;
        }
        while ( v163 );
        dword_2E4835C = *(_DWORD *)(a3 + 6);
        sub_755B50(11, (int)"Started Map %s\n", (unsigned int)&byte_2E483E0);
        if ( (unsigned __int8)std__operator___char_std__char_traits_char__std__allocator_char__(&v274, "Map3") )
        {
          __asm
          {
            movss   xmm0, ds:dword_A69C04
            movss   dword_AF2328, xmm0
          }
        }
        LOBYTE(v314) = 0;
        std_char(&v274);
      }
      std__basic_string_char_std__char_traits_char__std__allocator_char____operator_(&unk_2E484E0, "LEVELS\\");
      std__basic_string_char_std__char_traits_char__std__allocator_char____operator__(&unk_2E484E0, &byte_2E483E0);
      std__basic_string_char_std__char_traits_char__std__allocator_char____operator__(
        &unk_2E484E0,
        "\\Scene\\CFG\\ObjectCFG.cfg");
      sub_7B6D60(v167, a3 + 10);
      v166 = a3 + 165;
      v165 = 12;
      do
      {
        if ( *(_DWORD *)v166 > -1 )
        {
          LODWORD(v168) = *(_DWORD *)(v166 - 155);
          v264[1] = *(LPCSTR *)v166;
          v264[0] = *(LPCSTR *)(v166 - 151);
          v263 = LODWORD(v168);
          v169 = sub_48B040();
          sub_8FADA0(v169, v263, v264[0], v264[1]);
        }
        v166 += 159;
        --v165;
      }
      while ( v165 );
      v170 = sub_4612E0();
      v171 = sub_461320();
      std__basic_string_char_std__char_traits_char__std__allocator_char____operator_(v170, a3 + 2302);
      std__basic_string_char_std__char_traits_char__std__allocator_char____operator_(v170 + 28, a3 + 2327);
      std__basic_string_char_std__char_traits_char__std__allocator_char____operator_(v171, a3 + 2334);
      std__basic_string_char_std__char_traits_char__std__allocator_char____operator_(v171 + 28, a3 + 2359);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x2E:
      v172 = sub_896920();
      (*(void (__thiscall **)(int, _DWORD))(*(_DWORD *)v172 + 16))(v172, a3);
      goto LABEL_8;
    case 0x99:
      v173 = *(_DWORD *)(a3 + 5);
      v264[1] = *(LPCSTR *)(a3 + 9);
      sub_755B50(11, (int)"Receiving PKT_World_SendGameNumber, GameID :%016llx\n", v173);
      sub_90B2C0(*(_DWORD *)(a3 + 5), *(_DWORD *)(a3 + 9));
      sub_90B290(a3 + 13);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x9E:
      sub_8682B0(a3 + 5);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xA1:
      v174 = sub_8F2A20(*(_DWORD *)(a3 + 5));
      if ( !v174 )
      {
        sub_755B50(
          11,
          (int)"Attempting to show disconnect for player with NetID=%d, which doesn't exist!\n",
          *(_DWORD *)(a3 + 5));
        v264[1] = (LPCSTR)&v303;
        goto LABEL_9;
      }
      if ( LODWORD(dword_D9B254) )
      {
        if ( (*(_DWORD *)(v174 + 28) == *(_DWORD *)(LODWORD(dword_D9B254) + 28)) == (*(_BYTE *)(a3 + 9) & 1) )
        {
          v264[1] = (LPCSTR)&v303;
          goto LABEL_9;
        }
      }
      else
      {
        if ( *(_BYTE *)(a3 + 9) & 1 )
          goto LABEL_8;
      }
      sub_80EF80(*(_DWORD *)(a3 + 5));
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x10:
      v267 = 0;
      sub_4074A0();
      sub_4074D0();
      while ( (unsigned __int8)sub_423DA0() )
      {
        sub_43BF40();
        if ( sub_896460() == *(_DWORD *)(a3 + 5) )
          v267 = sub_896420();
        sub_408410();
      }
      v175 = sub_760760(v264[2], v264[3]);
      std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
        &v271,
        v175);
      LOBYTE(v314) = 23;
      std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__((char *)&Dst + 3);
      LOBYTE(v314) = 24;
      v176 = (*(int (__thiscall **)(int, _DWORD))(*(_DWORD *)dword_2E47DF8 + 100))(dword_2E47DF8, *(_DWORD *)(a3 + 5));
      sub_82A4B0(v176);
      std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
        &v274,
        "<font color='");
      LOBYTE(v314) = 25;
      if ( (unsigned __int8)(*(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 160))() || !LODWORD(dword_D9B254) )
      {
        if ( (unsigned __int8)(*(int (__thiscall **)(int, _DWORD, signed int))(*(_DWORD *)dword_2E47DF8 + 108))(
                                dword_2E47DF8,
                                *(_DWORD *)(a3 + 5),
                                100) )
        {
          v180 = sub_7D8890(&v295);
          LOBYTE(v314) = 26;
          std__basic_string_char_std__char_traits_char__std__allocator_char____operator__(&v274, v180);
          v177 = &v295;
        }
        else
        {
          v181 = sub_7D87D0(&v293);
          LOBYTE(v314) = 27;
          std__basic_string_char_std__char_traits_char__std__allocator_char____operator__(&v274, v181);
          v177 = &v293;
        }
      }
      else
      {
        if ( (unsigned __int8)(*(int (__thiscall **)(int, _DWORD, _DWORD))(*(_DWORD *)dword_2E47DF8 + 108))(
                                dword_2E47DF8,
                                *(_DWORD *)(a3 + 5),
                                *(_DWORD *)(LODWORD(dword_D9B254) + 28)) )
        {
          v178 = sub_7D8C50(&v285);
          LOBYTE(v314) = 28;
          std__basic_string_char_std__char_traits_char__std__allocator_char____operator__(&v274, v178);
          v177 = &v285;
        }
        else
        {
          v179 = sub_7D8B90(&v294);
          LOBYTE(v314) = 29;
          std__basic_string_char_std__char_traits_char__std__allocator_char____operator__(&v274, v179);
          v177 = &v294;
        }
      }
      LOBYTE(v314) = 25;
      std_char(v177);
      std__basic_string_char_std__char_traits_char__std__allocator_char____operator__(&v274, "'>");
      std__basic_string_char_std__char_traits_char__std__allocator_char____operator__(&v274, (char *)&Dst + 3);
      std__basic_string_char_std__char_traits_char__std__allocator_char____operator__(&v274, "</font>");
      v182 = (void *)std__basic_string_char_std__char_traits_char__std__allocator_char____find(&v271, "@srctr name@", 0);
      if ( v182 != std__basic_string_char_std__char_traits_char__std__allocator_char____npos )
        std__basic_string_char_std__char_traits_char__std__allocator_char____replace(&v271, v182, 12, &v274);
      sub_86D260(1, 1, 0, 1);
      LODWORD(v265) = 0;
      sub_424A60(v183);
      v184 = sub_424A30(v264[0]);
      sub_8D08D0(v184, 64);
      if ( *(_DWORD *)(a3 + 5) == (*(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 84))() )
        byte_D9B176 = 1;
      LOBYTE(v314) = 24;
      std_char(&v274);
      LOBYTE(v314) = 23;
      std_char((char *)&Dst + 3);
      LOBYTE(v314) = 0;
      std_char(&v271);
      goto LABEL_8;
    case 0x4A:
      byte_D9B176 = 0;
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xA4:
      v185 = *(_DWORD *)(a3 + 5);
      v186 = sub_41CAE0();
      *(_DWORD *)(v186 + 4) ^= v185;
      sub_913010(v186, v185);
      goto LABEL_8;
    case 0x8A:
      v264[1] = (LPCSTR)*(_BYTE *)(a3 + 9);
      sub_41CAE0();
      sub_81D130(SLOBYTE(v264[1]));
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x83:
      dword_D9B2DC = 1 - dword_D9B2DC;
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xB5:
      v187 = *(_BYTE *)(a3 + 5) == 0;
      v264[1] = (LPCSTR)&v303;
      dword_D9B2DC = v187;
      goto LABEL_9;
    case 6:
      _ESI = a3;
      if ( *(_BYTE *)(a3 + 21) )
      {
        __asm { movss   xmm0, dword ptr [esi+11h] }
        sub_7CA580(*(_DWORD *)(a3 + 5), *(_DWORD *)(a3 + 9), *(_DWORD *)(a3 + 13));
      }
      if ( !LODWORD(dword_D9B254) )
        goto LABEL_43;
      v190 = *(float *)(a3 + 17);
      v191 = *(void (__stdcall **)(_DWORD, _DWORD, _DWORD))(*LODWORD(dword_D9B254) + 480);
      v264[1] = (LPCSTR)*(_BYTE *)(a3 + 21);
      *(float *)v264 = v190;
      v191(a3 + 5, v264[0], v264[1]);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x7D:
      v192 = sub_896920();
      (*(void (__thiscall **)(int, _DWORD))(*(_DWORD *)v192 + 12))(v192, *(_BYTE *)(a3 + 5));
      goto LABEL_8;
    case 0x7E:
      if ( (unsigned __int8)sub_80C440() != 1 )
        goto LABEL_349;
      std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
        &v277,
        a3 + 5);
      LOBYTE(v314) = 30;
      std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
        &v278,
        a3 + 69);
      LOBYTE(v314) = 31;
      sub_809BC0(&v274, &v278, &v277);
      LOBYTE(v314) = 33;
      std_char(&v278);
      LOBYTE(v314) = 34;
      std_char(&v277);
      v193 = 0;
      if ( *(_BYTE *)(a3 + 133) )
      {
        v194 = operator new(0x44u);
        LODWORD(v265) = v194;
        LOBYTE(v314) = 35;
        if ( v194 )
          v193 = sub_80A120(v194, &v274, *(_DWORD *)(a3 + 134));
        else
          v193 = 0;
        LOBYTE(v314) = 34;
      }
      v195 = sub_80BCA0(&v274, v193);
      LOBYTE(v314) = 0;
      if ( v195 )
      {
        std_char(&v274);
        v264[1] = (LPCSTR)&v303;
      }
      else
      {
        std_char(&v274);
        v4 = 0;
LABEL_349:
        *(int *)((char *)&v269 + 1) = *(_DWORD *)(a3 + 134);
        *(_DWORD *)((char *)&v268 + 1) = v4;
        LOBYTE(v268) = 5;
        (*(void (__stdcall **)(signed int, float *, signed int, int))(*(_DWORD *)dword_2E47DF8 + 48))(9, &v268, 1, v4);
        v264[1] = (LPCSTR)&v303;
      }
      goto LABEL_9;
    case 0x13:
      *(float *)&v264[1] = *(float *)(a3 + 5);
      sub_403840(v264[0]);
      sub_77DFA0(v264[1]);
      if ( !LODWORD(dword_D9B254) )
        goto LABEL_30;
      sub_9125F0(LODWORD(dword_D9B254), 9, "Freq %.2f", *(float *)(a3 + 5));
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xAA:
      _EDI = a3;
      __asm
      {
        cvtsi2ss xmm0, dword ptr [edi+9]
        movss   [esp+708h+var_708+4], xmm0
      }
      sub_403840(v264[0]);
      sub_74B190(v264[1]);
      v198 = *(_BYTE *)(a3 + 13) & 1;
      sub_403840(v264[2]);
      LOBYTE(v199) = v198;
      if ( !(unsigned __int8)sub_74B280(v199) || !(*(_BYTE *)(a3 + 13) & 1) || !dword_D9B278 )
        goto LABEL_43;
      sub_7DF5C0(*(_DWORD *)(a3 + 5));
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xA:
      v264[1] = (LPCSTR)(*(_BYTE *)(a3 + 9) & 1);
      sub_403840(v3);
      sub_74B030(SLOBYTE(v264[1]));
      if ( !dword_D9B278 )
        goto LABEL_43;
      sub_7DF290(*(_BYTE *)(a3 + 9) & 1);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x5D:
      sub_90A700();
      sub_8743E0(v265);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xBD:
      sub_90A700();
      sub_874330(v265);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xBC:
      if ( !dword_D9B278 || !*(_DWORD *)(dword_D9B278 + 192) )
        goto LABEL_43;
      LODWORD(v265) = &v259;
      std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
        &v259,
        a3 + 5);
      sub_7E4550(SLOBYTE(v259), v260, LODWORD(v261), v262, v263, v264[0], v264[1]);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xC1:
      if ( !dword_D9B278 || !*(_DWORD *)(dword_D9B278 + 192) )
        goto LABEL_30;
      sub_7E4830();
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xF:
      if ( dword_D9B278 )
      {
        v200 = *(_DWORD *)(dword_D9B278 + 128);
        if ( v200 )
        {
          if ( *(_BYTE *)(v200 + 240) )
            (*(void (**)(void))(*(_DWORD *)v200 + 36))();
        }
      }
      goto LABEL_8;
    case 0x3B:
      if ( !dword_D9B278 || !*(_DWORD *)(dword_D9B278 + 188) )
        goto LABEL_30;
      memcpy_s((char *)&Dst + 3, 0x80u, (const void *)(a3 + 5), 0x80u);
      sub_7A31B0(*(_DWORD *)(dword_D9B278 + 188));
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xAB:
      if ( dword_D9B278 )
      {
        if ( *(_DWORD *)(dword_D9B278 + 188) )
          sub_7A1D70();
      }
      goto LABEL_8;
    case 0xE:
      if ( !dword_D9B278 || !*(_DWORD *)(dword_D9B278 + 188) )
        goto LABEL_30;
      memcpy_s((char *)&Dst + 3, 0x80u, (const void *)(a3 + 5), 0x80u);
      sub_7A3180(*(_DWORD *)(dword_D9B278 + 188));
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xA9:
      if ( dword_D9B278 )
      {
        if ( *(_DWORD *)(dword_D9B278 + 188) )
          sub_7A3150();
      }
      goto LABEL_8;
    case 0xB0:
      if ( !dword_D9B278 || !*(_DWORD *)(dword_D9B278 + 188) )
        goto LABEL_43;
      sub_7A1D40();
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xBA:
      if ( !dword_D9B278 || !*(_DWORD *)(dword_D9B278 + 188) )
        goto LABEL_30;
      sub_7A3120();
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x44:
      if ( dword_D9B278 )
      {
        if ( (unsigned int)*(_BYTE *)(a3 + 5) <= 8 )
          sub_7DA230(a3, *(_BYTE *)(a3 + 6));
      }
      goto LABEL_8;
    case 0xB7:
      if ( !dword_D9B278 || !*(_DWORD *)(dword_D9B278 + 128) || (v201 = *(_BYTE *)(a3 + 5), v201 > 4) )
        goto LABEL_43;
      sub_7D4930(v201, *(_BYTE *)(a3 + 6), *(_BYTE *)(a3 + 7));
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x14:
      if ( dword_D9B278 )
      {
        if ( LODWORD(dword_D9B254) )
        {
          if ( (unsigned int)*(_BYTE *)(a3 + 5) <= 0 )
          {
            v202 = *(_DWORD *)(dword_D9B278 + 184);
            if ( v202 )
              sub_7A6960(v202, *(_BYTE *)(a3 + 5));
          }
        }
      }
      goto LABEL_8;
    case 0xD3:
      if ( !dword_D9B278 )
        goto LABEL_30;
      v203 = dword_D9B254;
      if ( !LODWORD(dword_D9B254) )
        goto LABEL_30;
      LODWORD(v204) = *(_BYTE *)(a3 + 10);
      *(_DWORD *)((char *)&v299 + 3) = *(_BYTE *)(a3 + 11);
      v205 = *(_DWORD *)(a3 + 13);
      v206 = *(_DWORD *)(LODWORD(dword_D9B254) + 28) == v205;
      v298 = v204;
      LODWORD(v207) = *(_DWORD *)(a3 + 6);
      *(_DWORD *)((char *)&v299 + 7) = v205;
      DstBuf = v207;
      if ( v206 )
      {
        if ( *(_BYTE *)(a3 + 5) & 2 )
          sub_7D9750(*(float *)(a3 + 17));
        sub_7DBC50(*(_DWORD *)(a3 + 6), 2 - ((*(_BYTE *)(a3 + 5) & 1) != 0));
      }
      if ( !(*(_BYTE *)(a3 + 5) & 2) )
        goto LABEL_30;
      sub_424A60(LODWORD(v203));
      v208 = sub_424A30(v264[0]);
      sub_8D08D0(v208, 77);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xAE:
      v210 = *(_BYTE *)(a3 + 9);
      v211 = *(_BYTE *)(a3 + 10);
      v209 = *(_DWORD *)(a3 + 11);
      LODWORD(v271) = 0;
      HIDWORD(v271) = v210;
      v272 = v211;
      v273 = v209;
      if ( v209 == 100 || v209 == 200 )
      {
        v212 = (*(int (__stdcall **)(int, _DWORD))(*(_DWORD *)dword_2E47DF8 + 104))(v209, 0);
        if ( (unsigned __int8)std__operator___char_std__char_traits_char__std__allocator_char__(v212, &byte_9FBE94) )
        {
          v213 = sub_8F2960(v212, v273);
          if ( v213 )
            (*(void (__thiscall **)(int))(*(_DWORD *)(v213 + 264) + 4))(v213 + 264);
        }
      }
      if ( !dword_D9B278 )
        goto LABEL_43;
      v214 = dword_D9B254;
      if ( !LODWORD(dword_D9B254) )
      {
        if ( !(unsigned __int8)(*(int (**)(void))(*(_DWORD *)dword_2E47DF8 + 160))() )
          goto LABEL_43;
        v216 = *(_DWORD *)(a3 + 5);
        if ( !v216 )
          goto LABEL_419;
        if ( v216 != 4 )
          goto LABEL_43;
        goto LABEL_430;
      }
      v215 = *(_DWORD *)(a3 + 5);
      if ( v215 == 3 )
      {
        v264[1] = (LPCSTR)79;
        goto LABEL_431;
      }
      if ( !v215 )
      {
        sub_7D9970();
LABEL_419:
        v264[1] = (LPCSTR)81;
        goto LABEL_431;
      }
      if ( v215 != 1 )
      {
        if ( v215 != 4 )
        {
          if ( v215 != 2 )
            goto LABEL_43;
          sub_7D99A0();
          v264[1] = (LPCSTR)84;
          goto LABEL_431;
        }
LABEL_430:
        v264[1] = (LPCSTR)83;
        goto LABEL_431;
      }
      LODWORD(v214) = *(_DWORD *)(LODWORD(dword_D9B254) + 28);
      if ( LODWORD(v214) == *(_DWORD *)(a3 + 11) )
        sub_7D9970();
      v264[1] = (LPCSTR)82;
LABEL_431:
      sub_424A60(LODWORD(v214));
      v217 = sub_424A30(v264[0]);
      sub_8D08D0(v217, v264[1]);
      v264[1] = (LPCSTR)&v303;
LABEL_9:
      v314 = -1;
      sub_48A4D0(v264[1]);
      return 1;
    case 0x53:
      if ( !dword_D9B278 )
        goto LABEL_43;
      v218 = *(_BYTE *)(a3 + 5) - 1;
      if ( *(_BYTE *)(a3 + 5) == 1 )
      {
        v221 = *(_BYTE *)(a3 + 7);
        if ( *(_BYTE *)(a3 + 9) & 1 )
        {
          sub_7DA1C0(v218, v221);
          v264[1] = (LPCSTR)&v303;
        }
        else
        {
          sub_7DA150(v218, v221);
          v264[1] = (LPCSTR)&v303;
        }
        goto LABEL_9;
      }
      if ( *(_BYTE *)(a3 + 5) == 2 )
      {
        if ( *(_DWORD *)(dword_D9B278 + 128) )
        {
          if ( *(_BYTE *)(a3 + 9) & 1 )
          {
            sub_7D48C0(*(_BYTE *)(a3 + 6), *(_BYTE *)(a3 + 7), *(_BYTE *)(a3 + 8));
            v264[1] = (LPCSTR)&v303;
          }
          else
          {
            sub_7D4850(*(_BYTE *)(a3 + 6), *(_BYTE *)(a3 + 7), *(_BYTE *)(a3 + 8));
            v264[1] = (LPCSTR)&v303;
          }
          goto LABEL_9;
        }
      }
      else
      {
        if ( *(_BYTE *)(a3 + 5) == 3 )
        {
          v220 = *(_BYTE *)(a3 + 6);
          v219 = *(_DWORD *)(dword_D9B278 + 184);
          if ( *(_BYTE *)(a3 + 9) & 1 )
          {
            if ( v219 )
            {
              sub_7A68F0(v219, v220);
              v264[1] = (LPCSTR)&v303;
              goto LABEL_9;
            }
          }
          else
          {
            if ( v219 )
            {
              sub_7A6880(v219, v220);
              v264[1] = (LPCSTR)&v303;
              goto LABEL_9;
            }
          }
        }
      }
LABEL_43:
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 2:
      sub_760760(0, 0);
      sub_86D260(v262, v263, 0, 1);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x84:
      v223 = a3 + 7;
      v222 = *(_WORD *)(a3 + 5);
      if ( 17 * (unsigned int)*(_WORD *)(a3 + 5) + 7 > HIDWORD(a3) || (v267 = 0, !v222) )
        goto LABEL_30;
      do
      {
        v225 = *(_DWORD *)v223;
        v226 = *(_BYTE *)(v223 + 4);
        v228 = v223 + 4;
        v229 = *(_DWORD *)(v228 + 1);
        v230 = *(_DWORD *)(v228++ + 5);
        LODWORD(v271) = v229;
        v231 = *(_DWORD *)(v228 + 8);
        HIDWORD(v271) = v230;
        v272 = v231;
        v223 = v228 + 12;
        v224 = sub_90DF70(v225);
        v227 = v224;
        if ( v224 )
        {
          if ( v226 < 0x78u )
          {
            if ( v226 < 0x3Cu )
            {
              sub_883C50(&v271);
            }
            else
            {
              (*(void (__thiscall **)(int, int))(*(_DWORD *)(v224 + 4508) + 12))(v224 + 4508, v226 - 60);
              sub_839F10(&v271);
            }
          }
          else
          {
            if ( (*(int (__thiscall **)(int))(*(_DWORD *)v224 + 556))(v224) )
            {
              v232 = (*(int (__thiscall **)(int))(*(_DWORD *)v227 + 556))(v227);
              (*(void (__thiscall **)(int, int))(*(_DWORD *)v232 + 12))(v232, v226 - 120);
              sub_839F10(&v271);
            }
          }
        }
        v233 = v267++ + 1 < (unsigned int)*(_WORD *)(a3 + 5);
      }
      while ( v233 );
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x29:
      if ( (unsigned int)*(_BYTE *)(a3 + 5) > 6 )
        goto LABEL_30;
      sub_80BA40(*(_BYTE *)(a3 + 6) & 1);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x78:
      v234 = *(_BYTE *)(a3 + 5);
      sub_4408D0();
      sub_440900();
      if ( !(unsigned __int8)sub_423DA0() )
        goto LABEL_8;
      while ( 1 )
      {
        sub_43BF40();
        if ( (unsigned __int8)sub_89C220() )
        {
          if ( *(_DWORD *)(v235 + 28) == v234 )
            break;
        }
        sub_408410();
        if ( !(unsigned __int8)sub_423DA0() )
          goto LABEL_8;
      }
      v236 = _RTDynamicCast(v235, 0, &off_B08A60, &off_B08A7C, 0);
      (*(void (__thiscall **)(int, _DWORD))(*(_DWORD *)v236 + 496))(v236, *(_DWORD *)(a3 + 6));
      goto LABEL_8;
    case 0xC5:
      if ( !dword_D9B278 )
        goto LABEL_43;
      sub_7DBEC0();
      if ( dword_2E47DF0 )
      {
        v237 = sub_43BEE0();
        v238 = (*(int (__thiscall **)(int))(*(_DWORD *)v237 + 4))(v237);
        (*(void (__thiscall **)(int, signed int))(*(_DWORD *)v238 + 44))(v238, 2);
        v264[1] = (LPCSTR)&v303;
      }
      else
      {
        sub_755B50(9, (int)"gPTR_Input doesn't exist.  Probably reconnected at the end of a game.\n", SLOBYTE(v264[2]));
        v264[1] = (LPCSTR)&v303;
      }
      goto LABEL_9;
    case 4:
      sub_4408D0();
      sub_440900();
      if ( !(unsigned __int8)sub_423DA0() )
        goto LABEL_30;
      do
      {
        sub_43BF40();
        if ( (unsigned __int8)sub_89C220() )
        {
          v240 = _RTDynamicCast(v239, 0, &off_B08A60, &off_B0B738, 0);
          sub_88CDF0(v240);
        }
        sub_408410();
      }
      while ( (unsigned __int8)sub_423DA0() );
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xD5:
      _EAX = a3;
      __asm { movss   xmm0, dword ptr [eax+0Ah] }
      v242 = *(_BYTE *)(a3 + 5);
      __asm
      {
        movss   dword ptr [esp+700h+var_437+3], xmm0
        movss   xmm0, dword ptr [eax+6]
      }
      LOWORD(DstBuf) = 0;
      __asm { movss   dword ptr [esp+2C8h], xmm0 }
      sub_407440();
      sub_407470();
      if ( !(unsigned __int8)sub_423DA0() )
        goto LABEL_43;
      do
      {
        v245 = *(_DWORD *)sub_43BF40();
        if ( !v242 || (*(int (__thiscall **)(int))(*(_DWORD *)(v245 + 260) + 8))(v245 + 260) == v242 )
          sub_792A00(&DstBuf);
        sub_408410();
      }
      while ( (unsigned __int8)sub_423DA0() );
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x63:
      sub_80A1C0(*(float *)(a3 + 5));
      goto LABEL_8;
    case 0xC4:
      v247 = sub_90A670(*(_DWORD *)(a3 + 17));
      sub_90A670(*(_DWORD *)(a3 + 21));
      v246 = *(_DWORD *)(a3 + 13);
      if ( v246 == 1 || v246 == 2 )
        goto LABEL_486;
      if ( v246 == 3 )
      {
        v264[1] = (LPCSTR)(a3 + 62);
        if ( v247 )
        {
          std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
            &v286,
            v264[1]);
          LOBYTE(v314) = 36;
          sub_489990();
          LOBYTE(v314) = 0;
          std_char(&v286);
        }
        else
        {
          std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
            &v287,
            v264[1]);
          LOBYTE(v314) = 37;
          sub_489990();
          LOBYTE(v314) = 0;
          std_char(&v287);
        }
      }
      goto LABEL_8;
    case 0x2F:
    case 0xF4:
LABEL_486:
      sub_489990();
      goto LABEL_8;
    case 0x5C:
      sub_489990();
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0x97:
      sub_489990();
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xF3:
      if ( *(_BYTE *)(a3 + 137) )
      {
        std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
          &v289,
          a3 + 9);
        LOBYTE(v314) = 38;
        sub_489990();
        LOBYTE(v314) = 0;
        std_char(&v289);
        v264[1] = (LPCSTR)&v303;
      }
      else
      {
        std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
          &v296,
          a3 + 9);
        LOBYTE(v314) = 39;
        sub_489990();
        LOBYTE(v314) = 0;
        std_char(&v296);
        v264[1] = (LPCSTR)&v303;
      }
      goto LABEL_9;
    case 0xCC:
      v248 = *(_DWORD *)(a3 + 5);
      v249 = *(_BYTE *)(a3 + 9);
      LOBYTE(v265) = *(_BYTE *)(a3 + 9) & 1;
      sub_8AFF00(v248, v265, (v249 & 2) != 0 ? 100 : 200);
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xEE:
      v250 = (char *)sub_90A700();
      if ( sub_414640(*(_DWORD *)v250) )
      {
        std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
          &v280,
          "GOLD_EARNED");
        LOBYTE(v314) = 40;
        sub_418770(&v280, *(float *)(a3 + 9));
        LOBYTE(v314) = 0;
        std_char(&v280);
      }
      goto LABEL_8;
    case 0xE3:
      v252 = *(_DWORD *)(a3 + 5);
      v251 = sub_756320();
      if ( v251 )
      {
        v253 = sub_414640(*(_DWORD *)(v251 + 8));
        if ( v253 )
        {
          sub_48B070();
          v254 = *(float *)(a3 + 12);
          v255 = (const CHAR *)*(_BYTE *)(a3 + 10);
          v264[1] = (LPCSTR)(*(_BYTE *)(a3 + 11) & 1);
          v264[0] = v255;
          v263 = (int)v264[1];
          v256 = *(_BYTE *)(a3 + 9);
          *(float *)&v263 = v254;
          sub_90BBE0(v256, v253, v263, v255, v264[1]);
          v264[1] = (LPCSTR)&v303;
        }
        else
        {
          sub_755B50(9, (int)"Tried to increment player score for invalid hero object: %d!\n", *(_DWORD *)(a3 + 5));
          v264[1] = (LPCSTR)&v303;
        }
      }
      else
      {
        sub_755B50(9, (int)"Tried to increment player score for invalid game object: %d!\n", v252);
        v264[1] = (LPCSTR)&v303;
      }
      goto LABEL_9;
    case 0xE4:
      v258 = *(_DWORD *)(a3 + 5);
      v257 = sub_756320();
      if ( v257 )
      {
        if ( sub_414640(*(_DWORD *)(v257 + 8)) )
        {
          std__basic_string_char_std__char_traits_char__std__allocator_char____basic_string_char_std__char_traits_char__std__allocator_char__(
            &v282,
            off_AF6AD0[*(_BYTE *)(a3 + 9)]);
          LOBYTE(v314) = 41;
          sub_8D8EA0(&v282);
          LOBYTE(v314) = 0;
          std_char(&v282);
        }
        else
        {
          sub_755B50(9, (int)"Tried to increment player stat for invalid hero object: %d!\n", *(_DWORD *)(a3 + 5));
        }
      }
      else
      {
        sub_755B50(9, (int)"Tried to increment player stat for invalid game object: %d!\n", v258);
      }
      goto LABEL_8;
    case 0x27:
      sub_7CAFE0(*(float *)(a3 + 30), COERCE_FLOAT(1));
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xF0:
      sub_755B50(11, (int)"Received command to shut down.\n", SLOBYTE(v264[2]));
      dword_D9B264 = 3;
      dword_D9B260 = 4;
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
    case 0xE8:
      if ( *(_BYTE *)(a3 + 5) != 4 )
        goto LABEL_43;
      dword_D9B264 = 3;
      dword_D9B260 = 4;
      v264[1] = (LPCSTR)&v303;
      goto LABEL_9;
  }
}
